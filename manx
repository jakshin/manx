#!/bin/bash
# manx -- view man pages in various ways on macOS
# Execute with no arguments, or read the usage() function below, for usage info.

# Copyright (c) 2015,2024 Jason Jackson
#
# This program is free software; you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation;
# either version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License (GPLv2.txt) for more details.
#
# A copy of the GNU General Public License should accompany this program; if not,
# see http://www.gnu.org/licenses/gpl-2.0.html or write to the Free Software Foundation,
# 59 Temple Place, Suite 330, Boston, MA 02111.
# More details can be found at http://www.gnu.org/licenses/licenses.html.

function usage() {
	self="$(basename "$0")"  # Symlink name, if launched via symlink

	local err_msg="$1"
	if [[ -n "$err_msg" ]]; then
		echo -e "${red}Error: $err_msg${plain}\n"
	else
		echo -e "${bright}Manx -- view man pages better on macOS${plain}\n"
	fi

	echo -e "${bright}Usage:${plain}"
	echo "  $self [options] man-page"
	echo "  $self --clear-cache"
	echo
	echo -e "${bright}Options:${plain}"
	echo "  -h, --help      Show this usage information and exit"
	echo "  -b, --browser   Open man-page in your default browser"
	echo "  -e, --editor    Open man-page in your default text editor"
	echo "  -p, --preview   Open man-page in your default PDF viewer"
	echo "  -t, --terminal  Open man-page in Terminal's man-page viewer (default)"
	echo "  --clear-cache   Remove cached generated HTML/PDF/text files"
	echo
	echo "You may use the --clear-cache option with or without viewing a man page"

	if [[ -n "$err_msg" ]]; then
		exit 1
	else
		exit 0
	fi
}

function find_self() {
	local target cmd="$0"
	[[ $cmd == /* ]] || cmd="$(pwd)/$cmd"

	while [[ -L $cmd ]]; do
		if ! target="$(readlink -- "$cmd")"; then
			# We've resolved all symlinks
			break
		elif [[ $target != /* ]]; then
			# Relative symlink
			cmd="$(dirname -- "$cmd")/$target"
		else
			cmd="$target"
		fi
	done

	# set global variables
	self_dir="$(cd -- "$(dirname -- "$cmd")" && pwd)"
	self="$self_dir/$(basename -- "$cmd")"
}

if [[ -z $NO_COLOR ]]; then
	red="\033[0;1;31m"
	bright="\033[1m"
	plain="\033[0m"
else
	unset red bright plain
fi

# --- Get arguments from the MANX_OPTS environment variable & command line ---

viewer=t  # t means terminal
ext=
page=
clear_cache=false

function parse_args() {
	local arg

	for arg in "$@"; do
		if [[ "$arg" == "" ]]; then
			continue

		elif [[ "${arg:0:1}" == "-" ]]; then
			if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
				if [[ $parsing_from_env == 1 ]]; then
					# request for help in MANX_OPTS; ignore it
					continue
				else
					# request for help on command line;
					# display usage info, and exit without any further action
					usage
				fi
			elif [[ "$arg" == "-b" || "$arg" == "--browser" ]]; then
				viewer=b
				ext=html
			elif [[ "$arg" == "-e" || "$arg" == "--editor" ]]; then
				viewer=e
				ext=txt
			elif [[ "$arg" == "-p" || "$arg" == "--preview" ]]; then
				viewer=p
				ext=pdf
			elif [[ "$arg" == "-t" || "$arg" == "--terminal" ]]; then
				viewer=t
				ext=
			elif [[ "$arg" == "--clear-cache" ]]; then
				clear_cache=true
			else
				# unrecognized option
				local source=""
				if [[ $parsing_from_env == 1 ]]; then
					source=" in the MANX_OPTS environment variable"
				fi

				usage "Invalid option \"$arg\"$source"
			fi
		else
			if [[ $parsing_from_env == 1 ]]; then
				# non-option given in MANX_OPTS; ignore it
				continue	
			elif [[ "$page" != "" ]]; then
				# page was already specified in a previous argument
				usage "You can only view one man page at a time (\"$page\" then \"$arg\")"
			else
				page="$arg"
			fi
		fi
	done
}

parsing_from_env=1
opts=""
read -a opts -rd '' <<< "$MANX_OPTS"
parse_args "${opts[@]}"

parsing_from_env=0
parse_args "$@"

if [[ "$page" == "" && $clear_cache == false ]]; then
	usage
fi

# --- Test to see whether the request man page exists

# if the requested man page doesn't exist, this will display a "No manual entry" error on stderr,
# and exit with a non-zero status
if [[ "$page" != "" ]]; then
	if ! page_file="$(man -w "$page")" > /dev/null; then
		exit 1
	fi
fi

# --- Maintain our cache folder, where formatted output files will be stored ---

cache_root=~/Library/Caches/manx
cache_folder="$cache_root/$(sw_vers -productVersion)"
cache_file="$cache_folder/$page.$ext"

if [[ $clear_cache == true ]]; then
	mkdir -p "$cache_folder"
	echo "Clearing cache in $cache_root"
	rm -rf "${cache_root:?}"/*

elif [[ "$viewer" != "t" ]]; then
	mkdir -p "$cache_folder"

	# if our cache file already exists, ensure it's fresh
	if [[ -e "$cache_file" ]]; then
		find_self
		if [[ "$cache_file" -ot "$page_file" || "$cache_file" -ot "$self" ]]; then
			rm -f "$cache_file"
		fi
	fi

	# delete any cached files over 30 days old, then any empty directories
	find "$cache_root" -type f -mtime +30d -print0 | xargs -0 rm
	find "$cache_root" -depth -type d -not -path "$cache_root" -not -path "$cache_folder" -empty -exec /bin/bash -c "rmdir {} > /dev/null" \;
fi

# --- Open the requested man page, in the requested viewer ---

if [[ "$page" == "" ]]; then
	exit 0
fi

if [[ "$viewer" == "b" ]]; then
	# convert the man page to HTML using mandoc, and open it in the default web browser;
	# we could also use man2html and/or pandoc, if they're installed, or something like this:
	# man "$page" | col -b | textutil -stdin -convert html -title "$page" -fontsize 14pt
	if [[ ! -f "$cache_file" ]]; then
		mandoc -T html -O toc,style=styles.css "$page_file" > "$cache_file"
	fi

	style_file="$cache_folder/styles.css"

	if [[ ! -e "$style_file" ]]; then
		if [[ -L "$style_file" ]]; then
			rm "$style_file"
		fi

		if [[ -z "$self_dir" ]]; then
			find_self
		fi

		cp "$self_dir/styles.css" "$style_file"
	fi

	open "$cache_file"

elif [[ "$viewer" == "p" ]]; then
	# convert the man page to to PDF using mandoc, and open it in the default PDF viewer;
	# we could also use ghostscript or Homebrew's groff, if they're installed
	if [[ ! -f "$cache_file" ]]; then
		mandoc -T pdf "$page_file" > "$cache_file"
	fi

	open "$cache_file"

elif [[ "$viewer" == "e" ]]; then
	# convert the man page to text, and open it in the default text editor
	if [[ ! -f "$cache_file" ]]; then
		man "$page" | col -b > "$cache_file"
	fi

	open "$cache_file"

elif [[ "$viewer" == "t" ]]; then
	# open the man page in Terminal's man-page viewer
	open "x-man-page://$page"
fi
