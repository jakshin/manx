#!/bin/bash -e
# manx -- view man pages in various ways on macOS
# Copyright (c) 2015,2024 Jason Jackson
# https://github.com/jakshin/manx
#
# This program is free software; you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation;
# either version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License (GPLv2.txt) for more details.
#
# A copy of the GNU General Public License should accompany this program; if not,
# see http://www.gnu.org/licenses/gpl-2.0.html or write to the Free Software Foundation,
# 59 Temple Place, Suite 330, Boston, MA 02111.
# More details can be found at http://www.gnu.org/licenses/licenses.html.

script="$(basename "$0")"  # Symlink name, if launched via symlink

function usage() {
	local err_msg="$1"
	if [[ -n $err_msg && $err_msg != - ]]; then
		echo -e "${red}Error: ${err_msg}${plain}" 1>&2
		echo
	else
		echo -e "${bright}Manx -- view man pages better on macOS${plain}"
		echo -e "https://github.com/jakshin/manx\n"
	fi

	local b=$bright p=$plain
	echo -e "Usage:${b} ${script} ${p}[${smul}view-mode option${rmul}] [${smul}configuration options ...${rmul}]"\
						"[${smul}section${rmul}] ${smul}man-page${rmul}"
	echo -e "      ${b} ${script} --clear-cache ${p}"
	echo -e "      ${b} ${script} --completion ${p}"
	echo -e "      ${b} ${script} --help ${p}"
	echo

	if [[ -n $err_msg ]]; then
		local more=""
		if man -w "${script}" &> /dev/null; then
			more=", \"${b}${script} ${script}${p}\" or \"${b}man ${script}${p}\""
		fi

		echo -e "For usage details, run \"${b}${script} --help${p}\"${more}"
	else
		echo -e "Options can be given before and/or after the man page's name."
		echo
		echo -e "View-mode options control which viewer man pages will be presented in,"
		echo -e "and/or which file type will be used. These options are mutually exclusive."
		echo -e "If you pass more than one of them, the last one wins and takes effect."
		echo -e "If you don't pass any of them, ${b}--direct${p} mode is used by default."
		echo
		echo -e "  ${b}-d${p}, ${b}--direct${p}"
		echo -e "    Open the man page directly in your terminal window like usual,"
		echo -e "    but with fancy colors to make it easier and more enjoyable to read."
		echo -e "    This is the default if no options are given on the command line"
		echo -e "    or in the ${b}\$MANX_OPTIONS${p} environment variable."
		echo
		echo -e "  ${b}-h${p}, ${b}--html${p}, ${b}--browser${p}, ${b}--browser=${p}${smul}AppName${rmul}"
		echo -e "    Format the man page as HTML, and open it in your default browser"
		echo -e "    (or whichever app you have configured to open HTML files by default),"
		echo -e "    or the app you pass with the ${b}--browser${p} option."
		echo
		echo -e "  ${b}-p${p}, ${b}--pdf${p}, ${b}--pdf-viewer${p}, ${b}--pdf-viewer=${p}${smul}AppName${rmul}"
		echo -e "    Format the man page as PDF, and open it in your default PDF viewer,"
		echo -e "    or the app you pass with the ${b}--pdf-viewer${p} option."
		echo
		echo -e "  ${b}-t${p}, ${b}--text${p}, ${b}--editor${p}, ${b}--editor=${p}${smul}AppName${rmul}"
		echo -e "    Format the man page as plain text, and open it in your default editor,"
		echo -e "    or the app you pass with the ${b}--editor${p} option."
		echo
		echo -e "  ${b}-x${p}, ${b}--x-man-page${p}"
		echo -e "    Open the man page using macOS's ${b}x-man-page${p} URL scheme,"
		echo -e "    i.e. in a Terminal window with special formatting and colors."
		echo
		echo -e "Configuration options can be combined with each other, and used in any view mode."
		echo -e "If you pass one of these options multiple times, the last version wins."
		echo
		echo -e "  ${b}-M${p} ${smul}manpath${rmul}, ${b}--manpath=${p}${smul}manpath${rmul}"
		echo -e "    Just like man's ${b}-M${p} option: a colon-separated list of directories"
		echo -e "    to search for man pages, instead of the default. Overrides ${b}\$MANPATH${p}."
		echo -e "    Also see ${b}manpath(1)${p}."
		echo
		echo -e "  ${b}-S${p} ${smul}sections${rmul}, ${b}--sections=${p}${smul}sections${rmul}"
		echo -e "    Just like man's ${b}-S${p} option: a manual section, or colon-separated list"
		echo -e "    of sections to search, instead of the default. Overrides ${b}\$MANSECT${p}."
		echo
		echo -e "  ${b}--clear-cache${p}"
		echo -e "    Remove cached generated HTML/PDF/text files. You may use this option"
		echo -e "    with or without viewing a man page."
		echo
		echo -e "Special options make Manx do something other than view a man page."
		echo
		echo -e "  ${b}--completion${p}"
		echo -e "    Output shell script that implements command-line completion for Manx in zsh,"
		echo -e "    then exit. To use it, redirect it into a file like \$fpath[1]/_manx."
		echo
		echo -e "  ${b}--help${p}"
		echo -e "    Display this usage information, then exit."
	fi

	if [[ -n $MANX_OPTIONS ]]; then
		echo
		echo -e "The ${b}\$MANX_OPTIONS${p} environment variable is set: $MANX_OPTIONS"
	fi

	if [[ -n $err_msg ]]; then
		exit 1
	else
		exit 0
	fi
}

function find_self() {
	local target cmd="$0"
	[[ $cmd == /* ]] || cmd="$(pwd)/$cmd"

	while [[ -L $cmd ]]; do
		if ! target="$(readlink -- "$cmd")"; then
			# We've resolved all symlinks
			break
		elif [[ $target != /* ]]; then
			# Relative symlink
			cmd="$(dirname -- "$cmd")/$target"
		else
			cmd=$target
		fi
	done

	# set global variables
	self_dir="$(cd -- "$(dirname -- "$cmd")" && pwd)"
	self="$self_dir/$(basename -- "$cmd")"
}

if [[ -z $NO_COLOR ]]; then
	red="\033[0;1;31m"
	dim="\033[38;5;245m"
	bright="\033[1m"
	plain="\033[0m"
else
	unset red dim bright plain
fi

# https://unix.stackexchange.com/questions/108699/documentation-on-less-termcap-variables
smul="$(tput smul)"  # escape sequence to start underlining
rmul="$(tput rmul)"  # escape sequence to stop underlining

# --- Get arguments from the $MANX_OPTIONS environment variable & command line ---

viewer=direct
ext=""   # the extension/type of our generated file (n/a for x-man-page)
page=""  # the man page to view, e.g. "ls"
clear_cache=false
completion=false

man_path=""
man_sections=""

function parse_args() {
	local in_environment_variable=""
	if [[ $parsing_from_env == true ]]; then
		in_environment_variable=' in the $MANX_OPTIONS environment variable'
	fi

	local arg
	for arg in "$@"; do
		if [[ -z $arg ]]; then
			continue

		elif [[ $man_path == "@" ]]; then
			man_path=$arg
		elif [[ $man_sections == "@" ]]; then
			man_sections=$arg

		elif [[ $arg == -* ]]; then
			if [[ $arg == "--help" ]]; then
				if [[ $parsing_from_env == true ]]; then
					# request for help in $MANX_OPTIONS; ignore it
					continue
				else
					# request for help on command line;
					# display usage info, and exit without any further action
					usage
				fi
			elif [[ $arg == "-d" || $arg == "--direct" ]]; then
				viewer=direct
				ext=""  # we'll set this below
			elif [[ $arg == "-h" || $arg == "--html" || $arg == "--browser" ]]; then
				viewer=""
				ext=html
			elif [[ $arg == "--browser="* ]]; then
				viewer=${arg/*=}
				ext=html
			elif [[ $arg == "-p" || $arg == "--pdf" || $arg == "--pdf-viewer" ]]; then
				viewer=""
				ext=pdf
			elif [[ $arg == "--pdf-viewer="* ]]; then
				viewer=${arg/*=}
				ext=pdf
			elif [[ $arg == "-t" || $arg == "--text" || $arg == "--editor" ]]; then
				viewer=""
				ext=txt
			elif [[ $arg == "--editor="* ]]; then
				viewer=${arg/*=}
				ext=txt
			elif [[ $arg == "-x" || $arg == "--x-man-page" ]]; then
				viewer=x-man-page
				ext=""

			elif [[ $arg == "-M" ]]; then
				man_path=@  # next arg is the path
			elif [[ $arg == "-M"* ]]; then
				man_path=${arg:2}
			elif [[ $arg == "--manpath="* ]]; then
				man_path=${arg/*=}

			elif [[ $arg == "-S" ]]; then
				man_sections=@  # next arg is the section/list
			elif [[ $arg == "-S"* ]]; then
				man_sections=${arg:2}
			elif [[ $arg == "--section="* || $arg == "--sections="* ]]; then
				man_sections=${arg/*=}

			elif [[ $arg == "--clear-cache" ]]; then
				clear_cache=true
			elif [[ $arg == "--completion" ]]; then
				if [[ $parsing_from_env != true ]]; then
					completion=true
				fi
			else
				# unrecognized option
				usage "Invalid option \"${arg}\"${in_environment_variable}"
			fi
		else
			if [[ $parsing_from_env == true ]]; then
				# non-option given in $MANX_OPTIONS; ignore it
				continue
			elif [[ -z $page ]]; then
				page=$arg
			elif [[ $page =~ ^[1-9n]$ ]]; then
				# what we thought was the page was actually a section in the optional first argument
				man_sections=$page
				page=$arg
			elif [[ $arg == "$page" ]]; then
				continue
			else
				# page was already specified in a previous argument
				usage "You can only view one man page at a time (\"$page\" then \"$arg\")"
			fi
		fi
	done

	if [[ $man_path == "@" ]]; then
		usage "Missing manual path after -M${in_environment_variable}"
	elif [[ -n $man_path ]]; then
		export MANPATH=$man_path
	fi

	if [[ $man_sections == "@" ]]; then
		usage "Missing manual section/list after -S${in_environment_variable}"
	elif [[ -n $man_sections ]]; then
		export MANSECT=$man_sections
	fi
}

parsing_from_env=true
opts=""
read -a opts -rd '' <<< "$MANX_OPTIONS" || true
parse_args "${opts[@]}"

parsing_from_env=false
parse_args "$@"

if [[ $viewer == "direct" ]]; then
	cols=$(( COLUMNS < 140 ? COLUMNS : 140 ))  # 0 if $COLUMNS isn't set
	ext="col${cols}"
fi

if [[ -z $page && $clear_cache == false && $completion == false ]]; then
	usage -
fi

# --- Output our zsh completion script, if we're supposed to do that ---

if [[ $completion == true ]]; then
	compscript="H4sIAAAAAAAAA91X3XPaRhB/hr9io6rhw75ocD9DTGtPHDedBjdjaF8wYWTpBBoLnXp3AjuY/u3dvRNIxODpQ5/6hG739re/2927Xb
				4KxDwLeQRzP72v16M8DXQsUpjQutmCVb2WiMBPYClkCAs/6TkO+HJ6gr/1WiSkVcQpOO6KPtXobNztrJ03EAqAeq0WRzAagYum0OvB
				GYzHb0DPeIqqmsXDL54U2wwa7mN9eHysLAdP7M6emL3Afe2dfSXi3/Bp1GGv07GLG+Dly+IMJ90udF/RWScUiIRrPsn8KVdEqnYruX
				+HH1Fcr4Ui5fV6bYJ2+ZynWkEXblDndA4hgEs+zKYjaDQXMV+2GmZZW7HwmLEwljzQ68boT1QRZ0oCkDFYVfJAgSWF5nIep35yDMtY
				zyAQiZBqvEWbIdpMz5O9WL6C98P+B4J6ELkEzLafJxpupVgqLjcoDcYKSY89j+KDyngQR3HwJcaKZcgkC6NDRD5eXD7hQYHZoYH2zA
				oPMSlgKkR2QVZMIw/N7/dHFxFI94QJD2Mtqkys4BCLDUaFxi7Cit0jjXuGRoyM9pIpAfCGZCLLMxgW2cZkp6FYFnBURGiV+XpW1lH/
				CD0U0h5DB30/zdHSFpCQMUeeAhT3ZTA7xt/Ml77mIdw+mCpK1Rjrd4LbJ0msdOlJcfMQqNLVgFxtxFVfG9m/cPTFRdlYlm4DP5jxVp
				mBIEFAZqSjaz4XCw5mEcKUp9x6oLr0sCQ8k5AoTriqhIycVQGtb/Q6+j3XItfwWdGF2khBBTLONPhpCPw+1hWkGU+qSLQcDWZiCbmy
				icTncO4bkNK6vq68qgeOb9/ZkAeJLzmwcyxIFaheEx2NOuOe84s5akIsESA0j9PoBBWDB6X5HCOSJFb4DQo/xLfSlw8g8XBxap+y0b
				eouOCLOMC3RcYLLtUxDIqiMxEzlJUI7ri2Ft+hxSVqwJ7KCr8nNv682I7nAqXzKDK6H1DXj1XAk8RPucitxY8lTeSOcaLH02heo+Y3
				LlOO1coXPBHZVpWiahgk3vAOl616JTY+hVVpDE5rR0qhRCE2oeZdy4QP+9DaIVvbv+bmhjhu0+ZgyvVEZJq6Eraa7RVqoT9sGiwF1x
				hQs8A+ZI3d/vnVx/Ph+2e2IL6XK+ndxqlXQu4wxaum6rVfLwc9p+sAdpgQmDw3Yjg9PcU+aqCcLXM6GqltuzUr227Nmc0xqdlSn0I9
				bizUhFjVFp2YhYVyTQwtytrZaZs1G+Mjiiepu66NqFmMMai1SnM03dG2x22TVPyvnKdYa4za5ISsZXyLS10+Fo3d16NRJPa5+2L6qr
				0slb6PvN7+cX397mo4plGh7e3MABNb3WwKjfar5s+Pp+ynNl5ixz2jSpNc5xK34Rm2hUKE9hfKAMoHsFopJidFGRhrqpTBu7dDHICq
				WVQ9d2U2eF7Xe1zTeFRAGG0BYXc22o3/Qe2ajPWaeCujFuJz4pzJONURNL5WNzeYdvcTmXsOumzaOLS8dvPqoiu7uuW0nDXdYSoBPw
				xN2ogIYxZ6T7WU0amOr2omJOalA9iJpj33pL4z1+Kg1oHNMPpfDLWmMPfNta4h0n5qYPx0T9bF2EopInSboP3zLsGZ4xyC89q99YEp
				GSdgcmEk9P3ZTKudHSASbE+yObLhX4zkaLhvvK48JNtYmKjZp6IyTW9i+MLGcHNUygIPZgLDj0uHkmz+j9hb+w8Xuo2LswwAAA=="
	echo "$compscript" | base64 --decode | gunzip
	exit
fi

# --- Test to see whether the request man page exists ---

if [[ $page == */* ]]; then
	if [[ ! -e $page ]]; then
		[[ -L $page ]] && msg="Bad symlink" || msg="File not found"
		echo "$msg: $page" 1>&2
		exit 1
	elif [[ ! -f $page ]]; then
		echo "Not a manual file: $page"
		exit 1
	else
		page_file="$(realpath -- "$page")"
	fi

elif [[ -n $page ]]; then
	# if the requested man page doesn't exist,
	# "man -w" will display a "No manual entry" error on stderr
	if ! page_file="$(man -w "$page")" > /dev/null; then

		echo -en "${dim}"
		if [[ $MANSECT == *:* ]]; then
			echo "In sections: ${MANSECT//:/, }" 1>&2
		elif [[ -n $MANSECT ]]; then
			echo "In section: $MANSECT" 1>&2
		fi

		if [[ $MANPATH == *:* ]]; then
			echo $'\n'"Searching in directories:" 1>&2
			IFS=":" read -ra dirs <<< "$MANPATH"
			for dir in "${dirs[@]}"; do
				echo "$dir" 1>&2
			done
		elif [[ -n $MANPATH ]]; then
			echo "Searching in directory: $MANPATH" 1>&2
		fi

		echo -en "${plain}"
		exit 1
	fi
fi

# --- Maintain our cache folder, where formatted output files will be stored ---

cache_root=~/Library/Caches/manx
cache_folder="$cache_root/$(sw_vers -productVersion)"
cache_file="$cache_folder/$page.$ext"

if [[ $clear_cache == true ]]; then
	echo "Clearing cache in $cache_root"
	rm -rf "${cache_root:?}"/*

	if [[ -n $page ]]; then
		mkdir -p "$cache_folder"
	fi

elif [[ -n $ext ]]; then
	mkdir -p "$cache_folder"

	# if our cache file already exists, ensure it's fresh
	if [[ -e $cache_file ]]; then
		find_self
		if [[ $cache_file -ot $page_file || $cache_file -ot $self ]]; then
			rm -f "$cache_file"
		fi
	fi

	# delete any cached files over 30 days old, then any empty directories
	find "$cache_root" -type f -mtime +30d -print0 | xargs -0 rm
	find "$cache_root" -depth -type d -not -path "$cache_root" -not -path "$cache_folder" -empty -exec /bin/bash -c "rmdir {} > /dev/null" \;
fi

# if we're viewing a manual file instead of page, create any needed subdirectories
if [[ $page == */* ]]; then
	cache_folder+="$(dirname -- "$page_file")"
	mkdir -p "$cache_folder"
fi

# --- Open the requested man page, in the requested viewer ---

if [[ -z $page ]]; then
	exit 0  # we just cleared cache, with no man page requested

elif [[ $viewer == "direct" ]]; then
	if [[ ! -f $cache_file ]]; then
		export MANWIDTH=$cols
		man "$page_file" > "$cache_file"

		# make section headers fancy, and a different color than other bold text
		# (which requires stripping the overstrike formatting man has applied to them)
		perl -pi -e 'sub clean { my ($cleaned) = @_; $cleaned =~ s/\x8.//g; return $cleaned; };\
			s/^((([\w_,.-])\x8\3)( +|([\w_,.-])\x8\5)+)/"\e[1m~~( " . (clean $1) . " \e[1m)~~"/ge' "$cache_file"
	fi

	if [[ -z $NO_COLOR ]]; then
		# https://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
		export LESS_TERMCAP_md=$'\e[38;5;73m'            # start bold mode
		export LESS_TERMCAP_me=$'\e[0m'                  # end all modes (bold, standout, underline)
		export LESS_TERMCAP_so=$'\e[38;5;228;48;5;240m'  # start standout mode
		export LESS_TERMCAP_se=$'\e[0m'                  # end standout mode
		export LESS_TERMCAP_us="$smul"$'\e[38;5;107m'    # start underlining
		export LESS_TERMCAP_ue="$rmul"$'\e[0m'           # end underlining
	fi

	IFS=" " read -ra manpager <<< "${MANPAGER:-}"  # empty array if $MANPAGER isn't set
	if [[ ${manpager[0]} != "less" && ${manpager[0]} != *"/less" ]]; then
		manpager=(less -sR)  # matching man's default
	else
		found=false
		for arg in "${manpager[@]:1}"; do
			if [[ $arg == -* && $arg == *R* ]]; then
				found=true
				break
			fi
		done

		if [[ $found == false ]]; then
			manpager+=(-R)
		fi
	fi

	exec "${manpager[@]}" < "$cache_file"
	exit

elif [[ $viewer == "x-man-page" ]]; then
	# open the man page in Terminal's man-page viewer
	open "x-man-page://$page"
	exit

elif [[ $ext == "html" ]]; then
	# convert the man page to HTML using mandoc, and open it in a web browser;
	# we could also use man2html or pandoc, if either is installed, or something like this:
	# man "$page" | col -b | textutil -stdin -convert html -title "$page" -fontsize 14pt
	if [[ ! -f $cache_file ]]; then
		mandoc -T html -O toc,style=styles.css "$page_file" > "$cache_file"

		if [[ $page == "$script" || "$(basename "$page")" == "$script.1" ]]; then
			# fix up the formatting of our own HTML man page a little
			indent='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
			perl -pi -e 's/^(\s*)\*/$1'"$indent"'&#x2022;/g' "$cache_file"
		fi
	fi

	style_file="$cache_folder/styles.css"
	if [[ ! -f $style_file ]]; then
		# styles.css encoded as base64, so it can easily be bundled into this script
		styles="H4sIAAAAAAAAA5VU227bMAx9jr+CQDH0gjjNrWmTAMOSbO0KtN0e9gOyRcdCZMmQlDZZ0X8fJdtpehs2BDFs6ujwckienoB1W4kWMm
				3AoOJohFpCwRSUbEl2ZuH7r9sbWNvaznUKJ6dRdHpSfx1a4JixtXS2DQ85KnA5wmHgPQRdOqEVCKsOHZEg95cdSyR2cmS8DdV7prWD
				R3gQ3OUT6HW7n6bwFDkeQLFxwkkkLA/AWFvCOty4mEmxVBMwYpm7/Rv3Wr6CpKgcGo/p3JHbzjyjx4+SUFzYUrLtBISSQmGA/GR0Ou
				N0mmnl4pAMARyRpQFwa5uzB/TOJ5BoycPRXMZcsCV8Bu4+AqWaY+euICeXkh4L/3adtiHYr5W3+yAv/duCv88STBkrhAyx5yRdqIGX
				Rq9NpSzoezRGcJKSCp9ovoXHqPXi6hVqsxSUsCWGbBq1CkbfVLLuNCK2cIdyEfcdEnzNZOzL6lkqXCwxc16zcrO7G5sq0J1xE9fSjr
				vBRLzMU6RaajOBg9HX2cV8Vtk7JZqCCq1WdT0WxT70fDwejXrEmq6N9Za6+8gS9OaYasN8101AadLTkwaeG7HL3YrfpGev08MinPP9
				hJwuKfnOmakP814b8j79B/TvUS32QnwR2Wh8Ph9PX5X3Zp0KzuDK0LRQD1umbFxXOnB7hkQbmrw40c7pguIqN2C1FBwOEHH6KuZBiK
				tVMs5pJqto+01V8/6bHPu7PAZv86/PWlFpkDJLjIecnvharBDISIuhYM7R4PoaQiJ1urLUbn76+7krJM1/sy7qDQIMpHA0sZAg3TRR
				68g6ISXJ4YBakVHL044wSFcZMTIqo588D39AWiDI0rxy581tSNYOmAOJzDrQSm7pgcdRizq6tZvendYW07BzPsOEHB49q3fsc2vKVn
				XtsKnb80oKerB0tTR6rXjciJud+d/0b1pxzqe7blgatn1WaQJnLxxV++6fHAV9/9fLlwJpB8GRFxCNrchjm+ZYkO6cmdVx1XfVPngv
				jv64/21wQeS7/p4P5uPFiCzkoFU1bhNkAxkOh7Ozixry0Zp/399gOJgNg7+POJtAml3nvTxFfwCQrpiyxAYAAA=="
		echo "$styles" | base64 --decode | gunzip > "$style_file"
	fi

	ext_type=public.html
	ext_default_handler=com.apple.safari

elif [[ "$ext" == "pdf" ]]; then
	# convert the man page to to PDF using mandoc, and open it in a PDF viewer;
	# we could also use ghostscript or Homebrew's groff, if either is installed
	if [[ ! -f $cache_file ]]; then
		mandoc -T pdf "$page_file" > "$cache_file"
	fi

	ext_type=com.adobe.pdf
	ext_default_handler=com.apple.preview

elif [[ $ext == "txt" ]]; then
	# convert the man page to text, and open it in a text editor
	if [[ ! -f $cache_file ]]; then
		man "$page" | col -b > "$cache_file"
	fi
fi

if [[ -z $viewer ]]; then
	# does the default viewer need a special startup-and-delay workaround to avoid jank?
	handler="$(defaults read com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers | 
				grep -F "$ext_type" -A4 | grep -F LSHandlerRoleAll || true)"  # Result contains multiple lines

	if [[ -z $handler ]]; then
		handler=$ext_default_handler
	fi
else
	# allow convenient short names for a couple of browsers
	viewer_lowercase="$(echo "$viewer" | tr '[:upper:]' '[:lower:]')"
	handler=$viewer_lowercase

	if [[ $viewer_lowercase == "chrome" ]]; then
		viewer="Google Chrome"
	elif [[ $viewer_lowercase == "edge" ]]; then
		viewer="Microsoft Edge"
	fi
fi

if [[ $handler == *"chrome"* ]]; then
	viewer="Google Chrome"
	viewer_delay=3
elif [[ $handler == *"edgemac"* ]]; then
	viewer="Microsoft Edge"
	viewer_delay=7
elif [[ $handler == *"safari"* ]]; then
	os_version="$(sw_vers -productVersion)"
	if [[ ${os_version/.*} == 11 ]]; then
		viewer="Safari"
		viewer_delay=10
	fi
fi

if [[ -n $viewer_delay ]]; then
	# try to work around these browsers opening extra windows/tabs as they start up
	# (only when they don't have a prior session to restore, in Chrome and Edge);
	# not needed for Firefox, or Safari on recent macOS -- they're better behaved
	if ! pgrep -lix -u "$(id -u)" "$viewer" &> /dev/null; then
		open -a "$viewer"
		echo "Waiting $viewer_delay seconds for $viewer to start up..."
		sleep "$viewer_delay"
	fi
fi

if [[ -z $viewer ]]; then
	open "$cache_file"
elif type -p "$viewer" > /dev/null; then
	"$viewer" "$cache_file"
else
	open -a "$viewer" "$cache_file"
fi
