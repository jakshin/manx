#!/bin/bash -e
# manx -- view man pages in various ways on macOS
# Copyright (c) 2015,2024 Jason Jackson
#
# This program is free software; you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation;
# either version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License (GPLv2.txt) for more details.
#
# A copy of the GNU General Public License should accompany this program; if not,
# see http://www.gnu.org/licenses/gpl-2.0.html or write to the Free Software Foundation,
# 59 Temple Place, Suite 330, Boston, MA 02111.
# More details can be found at http://www.gnu.org/licenses/licenses.html.

function usage() {
	local script
	script="$(basename "$0")"  # Symlink name, if launched via symlink

	local err_msg="$1"
	if [[ -n "$err_msg" ]]; then
		echo -e "${red}Error: $err_msg${plain}\n"
	else
		echo -e "${bright}Manx -- view man pages better on macOS${plain}\n"
	fi

	local b=$bright p=$plain
	echo -e "Usage:${b} ${script} ${p}[${smul}options${rmul}] ${smul}man-page${rmul}"
	echo -e "      ${b} ${script} --clear-cache ${p}"
	echo
	echo -e "Options can be given before or after the man page's name:"
	echo
	echo -e "  ${b}-d${p}, ${b}--direct${p}"
	echo -e "    Open the man page directly in your terminal window like usual,"
	echo -e "    but with fancy colors to make it easier and more enjoyable to read."
	echo -e "    This is the default if no options are given on the command line"
	echo -e "    or in the ${b}\$MANX_OPTIONS${p} environment variable."
	echo
	echo -e "  ${b}-h${p}, ${b}--html${p}, ${b}--browser${p}, ${b}--browser=${p}${smul}AppName${rmul}"
	echo -e "    Format the man page as HTML, and open it in your default browser"
	echo -e "    (or whichever app you have configured to open HTML files by default),"
	echo -e "    or the app you pass with the ${b}--browser${p} option."
	echo
	echo -e "  ${b}-p${p}, ${b}--pdf${p}, ${b}--viewer=${p}${smul}AppName${rmul}"
	echo -e "    Format the man page as PDF, and open it in your default PDF viewer,"
	echo -e "    or the app you pass with the ${b}--viewer${p} option."
	echo
	echo -e "  ${b}-t${p}, ${b}--text${p}, ${b}--editor${p}, ${b}--editor=${p}${smul}AppName${rmul}"
	echo -e "    Format the man page as plain text, and open it in your default editor,"
	echo -e "    or the app you pass with the ${b}--editor${p} option."
	echo
	echo -e "  ${b}-x${p}, ${b}--x-man-page${p}"
	echo -e "    Open the man page using macOS's ${b}x-man-page${p} URL scheme,"
	echo -e "    i.e. in a Terminal window with special formatting and colors."
	echo
	echo -e "  ${b}--clear-cache${p}"
	echo -e "    Remove cached generated HTML/PDF/text files. You may use this option"
	echo -e "    with or without viewing a man page.\n"

	if [[ "$MANX_OPTIONS" != "" ]]; then
		echo -e "The ${b}\$MANX_OPTIONS${p} environment variable is set: $MANX_OPTIONS"
	else
		echo -e "The ${b}\$MANX_OPTIONS${p} environment variable is empty."
	fi

	if [[ -n "$err_msg" ]]; then
		exit 1
	else
		exit 0
	fi
}

function find_self() {
	local target cmd="$0"
	[[ $cmd == /* ]] || cmd="$(pwd)/$cmd"

	while [[ -L $cmd ]]; do
		if ! target="$(readlink -- "$cmd")"; then
			# We've resolved all symlinks
			break
		elif [[ $target != /* ]]; then
			# Relative symlink
			cmd="$(dirname -- "$cmd")/$target"
		else
			cmd="$target"
		fi
	done

	# set global variables
	self_dir="$(cd -- "$(dirname -- "$cmd")" && pwd)"
	self="$self_dir/$(basename -- "$cmd")"
}

if [[ -z $NO_COLOR ]]; then
	red="\033[0;1;31m"
	bright="\033[1m"
	plain="\033[0m"
else
	unset red bright plain
fi

# https://unix.stackexchange.com/questions/108699/documentation-on-less-termcap-variables
smul="$(tput smul)"  # escape sequence to start underlining
rmul="$(tput rmul)"  # escape sequence to stop underlining

# --- Get arguments from the $MANX_OPTIONS environment variable & command line ---

viewer="direct"
ext=""   # the extension/type of our generated file (n/a for x-man-page)
page=""  # the man page to view, e.g. "ls"
clear_cache=false

function parse_args() {
	local arg

	for arg in "$@"; do
		if [[ "$arg" == "" ]]; then
			continue

		elif [[ "$arg" == -* ]]; then
			if [[ "$arg" == "--help" ]]; then
				if [[ $parsing_from_env == 1 ]]; then
					# request for help in $MANX_OPTIONS; ignore it
					continue
				else
					# request for help on command line;
					# display usage info, and exit without any further action
					usage
				fi
			elif [[ "$arg" == "-d" || "$arg" == "--direct" ]]; then
				viewer="direct"
				ext=""  # we'll set this below
			elif [[ "$arg" == "-h" || "$arg" == "--html" || "$arg" == "--browser" ]]; then
				viewer=""
				ext=html
			elif [[ "$arg" == --browser=* ]]; then
				viewer="${arg/*=}"
				ext=html
			elif [[ "$arg" == "-p" || "$arg" == "--pdf" ]]; then
				viewer=""
				ext=pdf
			elif [[ "$arg" == --viewer=* ]]; then
				viewer="${arg/*=}"
				ext=pdf
			elif [[ "$arg" == "-t" || "$arg" == "--text" || "$arg" == "--editor" ]]; then
				viewer=""
				ext=txt
			elif [[ "$arg" == --editor=* ]]; then
				viewer="${arg/*=}"
				ext=txt
			elif [[ "$arg" == "-x" || "$arg" == "--x-man-page" ]]; then
				viewer="x-man-page"
				ext=""
			elif [[ "$arg" == "--clear-cache" ]]; then
				clear_cache=true
			else
				# unrecognized option
				local source=""
				if [[ $parsing_from_env == 1 ]]; then
					source=' in the $MANX_OPTIONS environment variable'
				fi

				usage "Invalid option \"$arg\"$source"
			fi
		else
			if [[ $parsing_from_env == 1 ]]; then
				# non-option given in $MANX_OPTIONS; ignore it
				continue
			elif [[ "$page" != "" ]]; then
				# page was already specified in a previous argument
				usage "You can only view one man page at a time (\"$page\" then \"$arg\")"
			else
				page="$arg"
			fi
		fi
	done
}

parsing_from_env=1
opts=""
read -a opts -rd '' <<< "$MANX_OPTIONS" || true
parse_args "${opts[@]}"

parsing_from_env=0
parse_args "$@"

if [[ "$viewer" == "direct" ]]; then
	cols=$(( COLUMNS < 140 ? COLUMNS : 140 ))
	ext="col${cols}"
fi

if [[ "$page" == "" && $clear_cache == false ]]; then
	usage
fi

# --- Test to see whether the request man page exists

# if the requested man page doesn't exist, this will display a "No manual entry" error on stderr,
# and exit with a non-zero status
if [[ "$page" != "" ]]; then
	if ! page_file="$(man -w "$page")" > /dev/null; then
		exit 1
	fi
fi

# --- Maintain our cache folder, where formatted output files will be stored ---

cache_root=~/Library/Caches/manx
cache_folder="$cache_root/$(sw_vers -productVersion)"
cache_file="$cache_folder/$page.$ext"

if [[ $clear_cache == true ]]; then
	mkdir -p "$cache_folder"
	echo "Clearing cache in $cache_root"
	rm -rf "${cache_root:?}"/*

elif [[ "$ext" != "" ]]; then
	mkdir -p "$cache_folder"

	# if our cache file already exists, ensure it's fresh
	if [[ -e "$cache_file" ]]; then
		find_self
		if [[ "$cache_file" -ot "$page_file" || "$cache_file" -ot "$self" ]]; then
			rm -f "$cache_file"
		fi
	fi

	# delete any cached files over 30 days old, then any empty directories
	find "$cache_root" -type f -mtime +30d -print0 | xargs -0 rm
	find "$cache_root" -depth -type d -not -path "$cache_root" -not -path "$cache_folder" -empty -exec /bin/bash -c "rmdir {} > /dev/null" \;
fi

# --- Open the requested man page, in the requested viewer ---

if [[ "$page" == "" ]]; then
	exit 0  # we just cleared cache, with no man page requested

elif [[ "$viewer" == "direct" ]]; then
	if [[ ! -f "$cache_file" ]]; then
		export MANWIDTH=$cols
		man "$page_file" > "$cache_file"

		# make section headers fancy, and a different color than other bold text
		# (which requires stripping the overstrike formatting man has applied to them)
		perl -pi -e 'sub clean { my ($cleaned) = @_; $cleaned =~ s/\x8.//g; return $cleaned; };\
			s/^(((\w)\x8\3)( +|(\w)\x8\5)+)/"\e[1m~~( " . (clean $1) . " \e[1m)~~"/ge' "$cache_file"
	fi

	if [[ -z $NO_COLOR ]]; then
		# https://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
		export LESS_TERMCAP_md=$'\e[38;5;73m'            # start bold mode
		export LESS_TERMCAP_me=$'\e[0m'                  # end all modes (bold, standout, underline)
		export LESS_TERMCAP_so=$'\e[38;5;228;48;5;240m'  # start standout mode
		export LESS_TERMCAP_se=$'\e[0m'                  # end standout mode
		export LESS_TERMCAP_us="$smul"$'\e[38;5;107m'    # start underlining
		export LESS_TERMCAP_ue="$rmul"$'\e[0m'           # end underlining
	fi

	IFS=" " read -ra manpager <<< "${MANPAGER:-}"  # empty array if $MANPAGER isn't set
	if [[ "${manpager[0]}" != "less" && "${manpager[0]}" != *"/less" ]]; then
		manpager=(less -sR)  # matching man's default
	else
		found=false
		for arg in "${manpager[@]:1}"; do
			if [[ "$arg" == -* && "$arg" == *R* ]]; then
				found=true
				break
			fi
		done

		if [[ $found == false ]]; then
			manpager+=(-R)
		fi
	fi

	"${manpager[@]}" < "$cache_file"
	exit

elif [[ "$viewer" == "x-man-page" ]]; then
	# open the man page in Terminal's man-page viewer
	open "x-man-page://$page"
	exit

elif [[ "$ext" == "html" ]]; then
	# convert the man page to HTML using mandoc, and open it in a web browser;
	# we could also use man2html or pandoc, if either is installed, or something like this:
	# man "$page" | col -b | textutil -stdin -convert html -title "$page" -fontsize 14pt
	if [[ ! -f "$cache_file" ]]; then
		mandoc -T html -O toc,style=styles.css "$page_file" > "$cache_file"
	fi

	style_file="$cache_folder/styles.css"
	if [[ ! -f "$style_file" ]]; then
		if [[ -z "$self_dir" ]]; then
			find_self
		fi

		cp "$self_dir/styles.css" "$style_file"
	fi

	ext_type="public.html"
	ext_default_handler="com.apple.safari"

elif [[ "$ext" == "pdf" ]]; then
	# convert the man page to to PDF using mandoc, and open it in a PDF viewer;
	# we could also use ghostscript or Homebrew's groff, if either is installed
	if [[ ! -f "$cache_file" ]]; then
		mandoc -T pdf "$page_file" > "$cache_file"
	fi

	ext_type="com.adobe.pdf"
	ext_default_handler="com.apple.preview"

elif [[ "$ext" == "txt" ]]; then
	# convert the man page to text, and open it in a text editor
	if [[ ! -f "$cache_file" ]]; then
		man "$page" | col -b > "$cache_file"
	fi
fi

if [[ "$viewer" == "" ]]; then
	# does the default viewer need a special startup-and-delay workaround to avoid jank?
	handler="$(defaults read com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers | 
				grep -F "$ext_type" -A4 | grep -F LSHandlerRoleAll || true)"  # Result contains multiple lines

	if [[ "$handler" == "" ]]; then
		handler=$ext_default_handler
	fi
else
	# allow convenient short names for a couple of browsers
	viewer_lowercase="$(echo "$viewer" | tr '[:upper:]' '[:lower:]')"
	handler=$viewer_lowercase

	if [[ "$viewer_lowercase" == "chrome" ]]; then
		viewer="Google Chrome"
	elif [[ "$viewer_lowercase" == "edge" ]]; then
		viewer="Microsoft Edge"
	fi
fi

if [[ "$handler" == *"chrome"* ]]; then
	viewer="Google Chrome"
	viewer_delay=3
elif [[ "$handler" == *"edgemac"* ]]; then
	viewer="Microsoft Edge"
	viewer_delay=7
elif [[ "$handler" == *"safari"* ]]; then
	os_version="$(sw_vers -productVersion)"
	if [[ "${os_version/.*}" == 11 ]]; then
		viewer="Safari"
		viewer_delay=10
	fi
fi

if [[ "$viewer_delay" != "" ]]; then
	# try to work around these browsers opening extra windows/tabs as they start up
	# (only when they don't have a prior session to restore, in Chrome and Edge);
	# not needed for Firefox, or Safari on recent macOS -- they're better behaved
	if ! pgrep -lix -u "$(id -u)" "$viewer" &> /dev/null; then
		open -a "$viewer"
		echo "Waiting $viewer_delay seconds for $viewer to start up..."
		sleep "$viewer_delay"
	fi
fi

if [[ "$viewer" == "" ]]; then
	open "$cache_file"
elif type -p "$viewer" > /dev/null; then
	"$viewer" "$cache_file"
else
	open -a "$viewer" "$cache_file"
fi
